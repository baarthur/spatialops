% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/count_features.R
\name{count_features}
\alias{count_features}
\title{Count features in a given space}
\usage{
count_features(x, y, radius, predicate = st_intersects, name)
}
\arguments{
\item{x}{Counting reference.}

\item{y}{Feature to be counted.}

\item{radius}{Radius to count features within, when \code{x} is a \code{POINT}.}

\item{predicate}{Spatial operation to be performed before counting. Default: \code{st_intersects}}

\item{name}{Optional. Argument to set the new column's name, otherwise it is set to "n_features".}
}
\value{
Original \code{x} with an additional column containing the number of \code{y} features that
intersect with observation in \code{x}.
}
\description{
Count features in a given space
}
\examples{
# load data
data("fortaleza")
data("metrofor")

# example 1: count features inside polygon

## select only stations
metrofor <- metrofor \%>\%
  dplyr::filter(station \%in\% c("light_rail", "subway"))

## 1.1 count stations per neighborhood
count_features(fortaleza, metrofor) \%>\%
  dplyr::arrange(dplyr::desc(n_features))

## 1.2 give a name to the new column
count_features(fortaleza, metrofor, name = "n_stations") \%>\%
  dplyr::arrange(dplyr::desc(n_stations))


# example 2: count features inside a buffer

## get neighborhood centroids
fortaleza <- sf::st_centroid(fortaleza)

## 2.1 count stations in a 500m buffer from centroid
count_features(fortaleza, metrofor, radius = 500) \%>\%
  dplyr::arrange(dplyr::desc(n_features))

## 2.2 using another predicate than st_intersects
count_features(fortaleza, metrofor, radius = 500, predicate = sf::st_covers) \%>\%
  dplyr::arrange(dplyr::desc(n_features))
}
