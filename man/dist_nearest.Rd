% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dist_nearest.R
\name{dist_nearest}
\alias{dist_nearest}
\title{Distance to the nearest feature}
\usage{
dist_nearest(x, y, name, id_feature = F, geometry = geometry, drop_units = T)
}
\arguments{
\item{x}{A \code{sf} object to calculate distances from.}

\item{y}{A \code{sf} object to retrieve the closest one to each observation in \code{x}}

\item{name}{An optional argument to set the new column's name, otherwise it is set to "distance".}

\item{id_feature}{Specifies if an additional column with \code{y}'s row id should be inserted. Defaults to \code{FALSE.}}

\item{geometry}{Specifies the name of the geometry column, if different from the default, to reorder variables.}

\item{drop_units}{Should units be included? Default: \code{FALSE}}
}
\value{
Original \code{x} with an additional column containing the distance to the closest  \code{y} feature.
}
\description{
For each spatial object in x, calculate the distance to the nearest feature in y.
}
\details{
\code{dist_nearest} First finds the closest feature in \code{y} to each feature in \code{x}, calculating then
pairwise distances faster than e.g. using a for loop and then minimizing distances or
calculating distance matrices.
}
\examples{
data("fortaleza")
data("metrofor")

# select only stations
metrofor <- dplyr::filter(metrofor, railway == "station")

# closest station to each neighborhood
dist_nearest(fortaleza, metrofor)

# specifying a column name
dist_nearest(fortaleza, metrofor, name = dist_metro)

# binding `y`s id to `x`
dist_nearest(fortaleza, metrofor, id_feature = TRUE)
}
