% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_h3_grid.R
\name{get_h3_grid}
\alias{get_h3_grid}
\title{Get a tidy H3 grid in a sf dataframe}
\usage{
get_h3_grid(
  shp,
  res = 9,
  crop = TRUE,
  buffer = TRUE,
  buffer_size = NULL,
  keep_crs = TRUE
)
}
\arguments{
\item{shp}{A \code{sf} object of type \code{POLYGON} or \code{MULTIPOLYGON}}

\item{res}{Desired H3 resolution, defaults to 9.}

\item{crop}{Should the polygons be cropped to the original polygon? If yes, \code{sf::st_intersection}
will be used. Defaults to \code{TRUE}}

\item{buffer}{In some polygons, border areas may not be included if they do not cover an hexagon's
centroid. Creating a border increases the probability of all borders being selected;
defaults to \code{TRUE}}

\item{buffer_size}{Allows selecting a custom buffer distance (in meters), when \code{buffer = TRUE}.
If left empty, defaults to 300 when \code{crop = TRUE} and 15 when \code{crop = FALSE}. To use a unit other
than metrics, pass as \verb{buffer_size = units::as_units(x, "unit)}.}

\item{keep_crs}{Should the original coordinate reference system (\code{crs}) be preserved? Defaults to
\code{TRUE}; otherwise, will return an object with \code{crs = 4326} (WGS84).}
}
\value{
An object with classes \code{sf}, \code{tbl_df}, \code{tbl}, and \code{data.frame}
}
\description{
More than a wrapper around \code{h3jsr::polygon_to_cells()}, this function automates the process
of getting an hexagonal grid for polygons, e.g. cities. It is particularly useful when retrieving
a grid for intersecting polygons, as it automates the cropping process (optional) to avoid
duplicates. Based on {\href{https://github.com/ipeaGIT/acesso_oport/}{aopdata}}.
}
\details{
\code{h3jsr} recommends passing polygons in WGS84 coordinates, \code{shp} is automatically converted
to that format if not already in WGS84. Since WGS84's Buffer size is passed in meters since
it is the default unit fot WGS84.
}
\examples{
library(dplyr)

data("fortaleza")

# grid for only one polygon

## cutting grid edges (default)
fortaleza \%>\%
  filter(name_neigh == "centro") \%>\%
  get_h3_grid()

## letting grid cross borders
fortaleza \%>\%
  filter(name_neigh == "centro") \%>\%
  get_h3_grid(crop = FALSE)


# grid for multiple polygons using purrr::map()

library(purrr)

## cutting edges
fortaleza \%>\%
  filter(name_region \%in\% c("SER III", "SER IV")) \%>\%
  pull(name_neigh) \%>\%
  map(
    \(x) fortaleza \%>\%
      filter(name_neigh == x) \%>\%
      get_h3_grid()
  ) \%>\%
  bind_rows()
}
